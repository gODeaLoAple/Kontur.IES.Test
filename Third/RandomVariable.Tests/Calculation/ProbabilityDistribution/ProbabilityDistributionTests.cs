
using NUnit.Framework;

using RandomVariableTests.Tests.Calculation.Commutativity;

using RandomVariable.PolishNotation;
using RandomVariable.PolishNotation.Interfaces;
using RandomVariable.ProbabilityDistribution.Operands;

using System;
using System.Collections.Generic;

namespace RandomVariableTests.Tests.Calculation
{
    [TestFixture]
    public class ProbabilityDistributionTests : CommutativityTests<CalculatedValue>
    {
        protected override IPolishNotationCalculator<CalculatedValue> Calculator { get; }
            = new PolishNotationCalculator<CalculatedValue>(new RandomVariable.ProbabilityDistribution.TokenParser.Parser());

        [TestCase("1d4", new[]
        {
            1, 0.25,
            2, 0.25,
            3, 0.25,
            4, 0.25,
        })]
        [TestCase("-1d4", new[]
        {
            -1, 0.25,
            -2, 0.25,
            -3, 0.25,
            -4, 0.25,
        })]
        [TestCase("3d2", new[]
        {
            3,12.5 / 100,
            4,37.5 / 100,
            5,37.5 / 100,
            6,12.5 / 100,
        })]
        [TestCase("4", new[]
        {
            4, 1d,
        })]
        [TestCase("1d4 + 5", new[]
        {
            1 + 5, 0.25,
            2 + 5, 0.25,
            3 + 5, 0.25,
            4 + 5, 0.25,
        })]
        [TestCase("1d4 - 5", new[]
        {
            1 - 5, 0.25,
            2 - 5, 0.25,
            3 - 5, 0.25,
            4 - 5, 0.25,
        })]
        [TestCase("5 - 1d4", new[]
        {
            5 - 1, 0.25,
            5 - 2, 0.25,
            5 - 3, 0.25,
            5 - 4, 0.25,
        })]
        [TestCase("- 1d4 / 5", new[]
        {
            -1 * 0.2, 0.25,
            -2 * 0.2, 0.25,
            -3 * 0.2, 0.25,
            -4 * 0.2, 0.25,
        })]
        [TestCase("1d4 * 5", new[]
        {
            1 * 5, 0.25,
            2 * 5, 0.25,
            3 * 5, 0.25,
            4 * 5, 0.25,
        })]
        [TestCase("1d4 / 5", new[]
        {
            1 * 0.2, 0.25,
            2 * 0.2, 0.25,
            3 * 0.2, 0.25,
            4 * 0.2, 0.25,
        })]
        [TestCase("1d4 * 5 + 3", new[]
        {
            1 * 5 + 3, 0.25,
            2 * 5 + 3, 0.25,
            3 * 5 + 3, 0.25,
            4 * 5 + 3, 0.25,
        })]
        [TestCase("1d4 / 5 + 3", new[]
        {
            1 * 0.2 + 3, 0.25,
            2 * 0.2 + 3, 0.25,
            3 * 0.2 + 3, 0.25,
            4 * 0.2 + 3, 0.25,
        })]
        [TestCase("1d4 + 1d4", new[]
        {
            2, 1/16d,
            3, 1/8d,
            4, 3/16d,
            5, 1/4d,
            6, 3/16d,
            7, 1/8d,
            8, 1/16d,
        })]
        [TestCase("2d4 + 3d2", new[]
        {
            5, 1/128d,
            6, 5/128d,
            7, 12/128d,
            8, 20/128d,
            9, 26/128d,
            10, 26/128d,
            11, 20/128d,
            12, 12/128d,
            13, 5/128d,
            14, 1/128d,

        })]
        [TestCase("1d4 + 1d4 + 3", new[]
        {
            2 + 3, 1/16d,
            3 + 3, 1/8d,
            4 + 3, 3/16d,
            5 + 3, 1/4d,
            6 + 3, 3/16d,
            7 + 3, 1/8d,
            8 + 3, 1/16d,
        })]
        [TestCase("1d4 - 1d4", new[]
        {
            -3, 1/16d,
            -2, 1/8d,
            -1, 3/16d,
            0, 1/4d,
            1, 3/16d,
            2, 1/8d,
            3, 1/16d,
        })]
        [TestCase("(1d4 + 1d5) * 2 + 7", new[]
        {
            11,5 / 100d,
            13,10 / 100d,
            15,15 / 100d,
            17,20 / 100d,
            19,20 / 100d,
            21,15 / 100d,
            23,10 / 100d,
            25,5 / 100d,
        })]
        [TestCase("(2d4 + 3d2) * 2 + 7", new[]
        {
            17,0.78125 / 100,
            19,3.90625 / 100,
            21,9.375 / 100,
            23,15.625 / 100,
            25,20.3125 / 100,
            27,20.3125 / 100,
            29,15.625 / 100,
            31,9.375 / 100,
            33,3.90625 / 100,
            35,0.78125 / 100,
        })]
        [TestCase("(3d6 + 3d10) * 2 + 7", new[]
        {
            19,0.000462962962963 / 100,
            21,0.00277777777778 / 100,
            23,0.00972222222222 / 100,
            25,0.0259259259259 / 100,
            27,0.0583333333333 / 100,
            29,0.116666666667 / 100,
            31,0.2125 / 100,
            33,0.358333333333 / 100,
            35,0.566666666667 / 100,
            37,0.849074074074 / 100,
            39,1.21388888889 / 100,
            41,1.66388888889 / 100,
            43,2.19537037037 / 100,
            45,2.79722222222 / 100,
            47,3.45 / 100,
            49,4.125 / 100,
            51,4.7875 / 100,
            53,5.4 / 100,
            55,5.925 / 100,
            57,6.32777777778 / 100,
            59,6.58055555556 / 100,
            61,6.66666666667 / 100,
            63,6.58055555556 / 100,
            65,6.32777777778 / 100,
            67,5.925 / 100,
            69,5.4 / 100,
            71,4.7875 / 100,
            73,4.125 / 100,
            75,3.45 / 100,
            77,2.79722222222 / 100,
            79,2.19537037037 / 100,
            81,1.66388888889 / 100,
            83,1.21388888889 / 100,
            85,0.849074074074 / 100,
            87,0.566666666667 / 100,
            89,0.358333333333 / 100,
            91,0.2125 / 100,
            93,0.116666666667 / 100,
            95,0.0583333333333 / 100,
            97,0.0259259259259 / 100,
            99,0.00972222222222 / 100,
            101,0.00277777777778 / 100,
            103,0.000462962962963 / 100,
        })]
        [TestCase("2d6 + (- 1d12 / 5)", new[]
        {
            1.8,0.0023148148148148147,
            1.6,0.0023148148148148147,
            1.4,0.006944444444444444,
            1.2,0.006944444444444444,
            1,0.006944444444444444,
            0.7999999999999998,0.006944444444444444,
            0.5999999999999999,0.0023148148148148147,
            0.3999999999999999,0.0023148148148148147,
            0.19999999999999996,0.0023148148148148147,
            0,0.0023148148148148147,
            -0.20000000000000018,0.0023148148148148147,
            -0.40000000000000036,0.0023148148148148147,
            2.8,0.020833333333333332,
            2.6,0.004629629629629629,
            2.4,0.011574074074074073,
            2.2,0.011574074074074073,
            2,0.011574074074074073,
            1.7999999999999998,0.011574074074074073,
            1.5999999999999999,0.004629629629629629,
            0.5999999999999996,0.004629629629629629,
            3.8,0.027777777777777776,
            3.6,0.006944444444444444,
            3.4,0.016203703703703703,
            3.2,0.016203703703703703,
            3,0.016203703703703703,
            2.5999999999999996,0.016203703703703703,
            1.5999999999999996,0.006944444444444444,
            4.8,0.034722222222222224,
            4.6,0.034722222222222224,
            4.4,0.020833333333333332,
            4.2,0.020833333333333332,
            4,0.020833333333333332,
            3.5999999999999996,0.020833333333333332,
            5.8,0.037037037037037035,
            5.6,0.037037037037037035,
            5.4,0.025462962962962965,
            5.2,0.025462962962962965,
            5,0.025462962962962965,
            6.8,0.034722222222222224,
            6.6,0.034722222222222224,
            6.4,0.025462962962962965,
            6.2,0.025462962962962965,
            6,0.025462962962962965,
            7.8,0.027777777777777776,
            7.6,0.027777777777777776,
            7.4,0.020833333333333332,
            7.2,0.020833333333333332,
            7,0.020833333333333332,
            8.8,0.020833333333333332,
            8.6,0.020833333333333332,
            8.4,0.016203703703703703,
            8.2,0.016203703703703703,
            8,0.016203703703703703,
            9.8,0.013888888888888888,
            9.6,0.013888888888888888,
            9.4,0.011574074074074073,
            9.2,0.011574074074074073,
            9,0.011574074074074073,
            10.8,0.006944444444444444,
            10.6,0.006944444444444444,
            10.4,0.006944444444444444,
            10.2,0.006944444444444444,
            10,0.006944444444444444,
            11.8,0.0023148148148148147,
            11.6,0.0023148148148148147,
            11.4,0.0023148148148148147,
            11.2,0.0023148148148148147,
            11,0.0023148148148148147,
        })]
        public void Плотность_распределения(string expression, double[] table)
        {
            var expected = new Dictionary<double, double>();
            for (var i = 0; i < table.Length; i += 2)
            {
                expected.Add(table[i], table[i + 1]);
            }
            
            var actual = Calculator.Calculate(TokenizeAndToPolishNotation(expression));
            
            AssertAreEqual(actual, expected);
        }

        protected override void AssertAreEqual(CalculatedValue actual, CalculatedValue expected)
        {
            AssertAreEqual(actual, expected.CalculateProbability());
        }

        private void AssertAreEqual(CalculatedValue actual, Dictionary<double, double> expected)
        {
            var res = actual.CalculateProbability();
            Assert.Multiple(() =>
            {
                foreach (var (key, value) in expected)
                {
                    Assert.That(Math.Abs(res[key] - value), Is.LessThan(1e-6), () => $"[{key}] => {res[key]} != {value}");
                }
            });
        }
    }
}